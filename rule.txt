# VIETNAMESE POS SYSTEM - DEVELOPMENT RULES
# 100% Free Cloudflare Stack + Latest 2026 Libraries

## 1. CLOUDFLARE FREE TIER CONSTRAINTS

### 1.1 Frontend (Cloudflare Pages - Free Tier)
- MUST use Cloudflare Pages (500 builds/month limit)
- MUST optimize build size < 25MB per deployment
- MUST use Cloudflare CDN for all static assets
- MUST implement aggressive caching strategies
- NO external CDNs (use Cloudflare R2 for assets)

### 1.2 Backend (Cloudflare Workers - Free Tier)
- MUST stay within 100,000 requests/day limit
- MUST keep Worker script size < 1MB
- MUST optimize CPU time < 10ms per request
- MUST implement request batching for analytics
- MUST use efficient error handling to avoid wasted requests

### 1.3 Database (Cloudflare D1 - Free Tier)
- MUST stay within 5GB storage limit
- MUST optimize for 25M read + 50K write requests/month
- MUST implement efficient indexing strategies
- MUST use database-level constraints for data integrity
- MUST implement soft deletes to preserve history

### 1.4 Storage (Cloudflare R2 - Free Tier)
- MUST stay within 10GB storage limit
- MUST optimize image sizes (WebP format mandatory)
- MUST implement automatic image compression
- MUST use R2 presigned URLs for direct uploads
- MUST implement cleanup jobs for unused files

### 1.5 KV Store (Cloudflare KV - Free Tier)
- MUST stay within 1GB storage limit
- MUST use for caching only (not primary storage)
- MUST implement TTL for all cached data
- MUST optimize for 100K read + 1K write operations/day

## 2. TECHNOLOGY STACK REQUIREMENTS (2026 Latest)

### 2.1 Frontend Stack
- React 19+ (latest stable)
- TypeScript 5.5+
- Vite 6+ (build tool)
- Ant Design 5.20+ (UI components)
- Zustand 5+ (state management)
- React Query 5+ (server state)
- React Hook Form 7.50+ (form handling)
- Recharts 2.12+ (data visualization)
- PWA Workbox 7+ (service worker)

### 2.2 Backend Stack
- Cloudflare Workers (latest runtime)
- Hono.js 4+ (web framework)
- Zod 3.23+ (validation)
- Jose 5+ (JWT handling)
- SQLite with D1 syntax
- Cloudflare Workers Types latest

### 2.3 Development Tools
- ESLint 9+ with TypeScript rules
- Prettier 3.3+
- Husky 9+ (git hooks)
- Lint-staged 15+
- Playwright 1.45+ (E2E testing)
- Vitest 2+ (unit testing)

## 3. ARCHITECTURE RULES

### 3.1 Frontend Architecture
- MUST follow feature-based folder structure
- MUST use TypeScript strict mode
- MUST implement proper error boundaries
- MUST use React.lazy for code splitting
- MUST implement PWA offline-first approach
- MUST use IndexedDB for offline data storage
- MUST implement service worker for background sync

### 3.2 Backend Architecture
- MUST use Hono.js with modular routing
- MUST implement middleware pipeline
- MUST use Zod for all input validation
- MUST implement proper error handling with status codes
- MUST use database transactions for data consistency
- MUST implement rate limiting using KV store

### 3.3 State Management Rules
- MUST use Zustand for client state
- MUST use React Query for server state
- MUST implement optimistic updates for POS operations
- MUST cache frequently accessed data in KV
- MUST implement proper state persistence for offline mode

## 4. VIETNAMESE BUSINESS RULES

### 4.1 Currency and Pricing
- MUST use Vietnamese Dong (VND) as primary currency
- MUST format currency with proper thousand separators (123.456.789₫)
- MUST support decimal places for pricing (even though VND rarely uses decimals)
- MUST implement proper rounding rules for cash payments
- MUST support discount calculations (percentage and fixed amount)

### 4.2 Tax Calculations (Vietnamese VAT)
- MUST implement 0%, 5%, 8%, 10% VAT rates
- MUST calculate tax-inclusive and tax-exclusive pricing
- MUST generate proper tax invoices (Hóa đơn VAT)
- MUST track tax by category for reporting
- MUST support tax exemptions for certain products

### 4.3 Vietnamese Address System
- MUST support Vietnamese address hierarchy: Tỉnh/Thành → Quận/Huyện → Phường/Xã
- MUST implement address autocomplete with Vietnamese dataset
- MUST validate Vietnamese phone numbers (10-11 digits, starts with 0)
- MUST support Vietnamese ID card numbers (9 or 12 digits)

### 4.4 Receipt and Invoice Requirements
- MUST generate Vietnamese receipts with proper format
- MUST include business registration info
- MUST support thermal printer integration (80mm paper)
- MUST implement QR code for digital receipts
- MUST store receipts for tax compliance (5 years)

## 5. POS BUSINESS LOGIC RULES

### 5.1 Product Management
- MUST support barcode scanning (EAN-13, Code 128)
- MUST implement automatic barcode generation
- MUST support product variants (size, color, etc.)
- MUST track inventory levels in real-time
- MUST implement low stock alerts
- MUST support product bundling and promotions

### 5.2 Order Processing
- MUST support multiple payment methods (cash, card, VNPay, MoMo, ZaloPay)
- MUST implement split payments
- MUST support order holds and recalls
- MUST implement customer queue management
- MUST support returns and refunds with proper tracking
- MUST implement offline order processing with sync

### 5.3 Customer Management
- MUST implement customer loyalty program
- MUST track purchase history
- MUST support customer search by phone/name
- MUST implement customer debt tracking
- MUST support customer groups with different pricing

### 5.4 Staff Management
- MUST implement role-based access control (Admin, Manager, Cashier)
- MUST track staff performance metrics
- MUST implement shift management
- MUST track sales commissions
- MUST support multi-user POS terminals

## 6. PERFORMANCE OPTIMIZATION RULES

### 6.1 Frontend Performance
- MUST achieve Lighthouse score > 90 on all metrics
- MUST implement virtual scrolling for large lists
- MUST use React.memo for expensive components
- MUST implement image lazy loading
- MUST minimize bundle size with tree shaking
- MUST implement proper caching headers

### 6.2 Backend Performance
- MUST optimize database queries with proper indexes
- MUST implement connection pooling
- MUST use prepared statements for repeated queries
- MUST implement background job processing
- MUST cache frequently accessed data
- MUST implement proper pagination

### 6.3 Offline Performance
- MUST cache essential app shell
- MUST implement background sync for orders
- MUST store product catalog offline
- MUST handle network failures gracefully
- MUST implement conflict resolution for offline changes

## 7. SECURITY RULES

### 7.1 Authentication & Authorization
- MUST implement JWT-based authentication
- MUST use secure token storage (httpOnly cookies)
- MUST implement proper session management
- MUST enforce strong password policies
- MUST implement account lockout after failed attempts
- MUST use RBAC for feature access

### 7.2 Data Protection
- MUST encrypt sensitive data at rest
- MUST implement proper input sanitization
- MUST use HTTPS for all communications
- MUST implement CSRF protection
- MUST validate file uploads strictly
- MUST implement audit logging for sensitive operations

### 7.3 Payment Security
- MUST never store card details locally
- MUST use tokenization for payment methods
- MUST implement secure webhook validation
- MUST encrypt payment logs
- MUST comply with PCI DSS requirements

## 8. TESTING REQUIREMENTS

### 8.1 Unit Testing
- MUST achieve > 80% code coverage
- MUST test all business logic functions
- MUST test all utility functions
- MUST test Zustand stores
- MUST mock external API calls

### 8.2 Integration Testing
- MUST test API endpoints with Hono.js
- MUST test database operations
- MUST test payment gateway integrations
- MUST test file upload operations

### 8.3 E2E Testing
- MUST test complete POS workflows
- MUST test offline scenarios
- MUST test payment processing
- MUST test receipt generation
- MUST test multi-user scenarios

## 9. DEPLOYMENT RULES

### 9.1 CI/CD Pipeline
- MUST use GitHub Actions for deployment
- MUST implement automated testing before deployment
- MUST use Cloudflare Pages for frontend deployment
- MUST use Wrangler CLI for Workers deployment
- MUST implement database migration scripts

### 9.2 Environment Management
- MUST separate dev/staging/production environments
- MUST use environment variables for configuration
- MUST implement feature flags for gradual rollouts
- MUST implement proper logging and monitoring

## 10. CODE QUALITY RULES

### 10.1 TypeScript Standards
- MUST use strict TypeScript configuration
- MUST define proper interfaces for all data structures
- MUST use discriminated unions for state management
- MUST implement proper error types
- MUST avoid 'any' type usage

### 10.2 Code Organization
- MUST follow the provided folder structure exactly
- MUST use barrel exports (index.ts files)
- MUST implement proper component composition
- MUST use consistent naming conventions
- MUST document complex business logic

### 10.3 Git Workflow
- MUST use conventional commit messages
- MUST implement pull request reviews
- MUST use semantic versioning
- MUST tag releases properly
- MUST maintain clean commit history

## 11. MONITORING AND ANALYTICS

### 11.1 Application Monitoring
- MUST implement error tracking
- MUST monitor performance metrics
- MUST track user interactions
- MUST implement health checks
- MUST monitor Cloudflare usage limits

### 11.2 Business Analytics
- MUST track sales metrics
- MUST monitor inventory levels
- MUST analyze customer behavior
- MUST track staff performance
- MUST generate business reports

## 12. COMPLIANCE AND BACKUP

### 12.1 Data Backup
- MUST implement daily D1 database backups
- MUST backup R2 stored files regularly
- MUST implement point-in-time recovery
- MUST test backup restoration procedures

### 12.2 Vietnamese Legal Compliance
- MUST comply with Vietnamese e-invoice regulations
- MUST implement proper tax reporting
- MUST maintain transaction records for legal requirements
- MUST implement data privacy protections

## 13. MOBILE AND PWA REQUIREMENTS

### 13.1 PWA Features
- MUST implement offline functionality
- MUST support add to home screen
- MUST implement push notifications
- MUST support background sync
- MUST implement app update mechanism

### 13.2 Mobile Optimization
- MUST support touch gestures
- MUST implement responsive design
- MUST optimize for mobile performance
- MUST support device rotation
- MUST implement mobile-specific UX patterns

## 14. INTEGRATION REQUIREMENTS

### 14.1 Hardware Integration
- MUST support thermal receipt printers
- MUST integrate barcode scanners
- MUST support cash drawer control
- MUST implement weight scale integration
- MUST support customer display screens

### 14.2 Third-party Services
- MUST integrate Vietnamese payment gateways (VNPay, MoMo, ZaloPay)
- MUST integrate Vietnamese SMS providers
- MUST support email notifications
- MUST integrate with Vietnamese shipping services

## 15. MAINTENANCE AND UPDATES

### 15.1 Regular Maintenance
- MUST update dependencies monthly
- MUST monitor security vulnerabilities
- MUST optimize database performance quarterly
- MUST review and update business rules
- MUST maintain documentation updates

### 15.2 Feature Updates
- MUST implement feature toggle system
- MUST support backward compatibility
- MUST implement gradual feature rollouts
- MUST gather user feedback
- MUST maintain change logs

---

# ENFORCEMENT NOTES:

1. All rules marked with "MUST" are mandatory requirements
2. Violation of Cloudflare free tier limits will result in service suspension
3. Security rules are non-negotiable and must be implemented first
4. Performance benchmarks must be met before production deployment
5. Vietnamese business rules must be validated with local requirements
6. Code quality gates must pass before merge approval
7. Testing requirements must be satisfied for each release
8. Documentation must be updated with each feature addition

cấu trúc toàn bộ trang web. 
CẤU TRÚC TSX ĐƯỢC ĐIỀU CHỈNH CHO CLOUDFLARE
1. Cấu trúc tổng quan (Cloudflare optimized)
khoaugment-pos/
├── frontend/                   # Cloudflare Pages
│   ├── src/
│   │   ├── components/         # Ant Design + custom components
│   │   ├── features/          # Feature-based modules
│   │   ├── layouts/           # Layout components
│   │   ├── pages/             # Page components
│   │   ├── hooks/             # Custom React hooks
│   │   ├── services/          # Cloudflare Workers API calls
│   │   ├── stores/            # Zustand state management
│   │   ├── utils/             # Web API utilities (no Node.js)
│   │   ├── types/             # TypeScript definitions
│   │   ├── constants/         # Cloudflare-specific constants
│   │   ├── assets/            # Static assets for R2
│   │   └── i18n/              # Vietnamese localization
│   ├── public/                # PWA manifest, icons
│   ├── tests/                 # Playwright E2E tests
│   └── cloudflare-configs/    # Pages-specific configs
├── backend/                   # Cloudflare Workers
│   ├── src/
│   │   ├── handlers/          # Route handlers
│   │   ├── middleware/        # Auth, CORS, Rate limiting
│   │   ├── services/          # Business logic
│   │   ├── utils/             # Web API utilities only
│   │   ├── types/             # Shared TypeScript types
│   │   └── schemas/           # Zod validation schemas
│   ├── migrations/            # D1 database migrations
│   └── wrangler.toml         # Cloudflare Workers config
├── shared/                    # Shared types between FE/BE
│   ├── types/                 # Common TypeScript definitions
│   ├── constants/             # Shared constants
│   └── schemas/               # Validation schemas
└── docs/                      # Documentation
2. Frontend Structure (Cloudflare Pages)
2.1 src/components/ (Ant Design focused)
src/components/
├── ui/                        # Ant Design wrapper components
│   ├── Button/
│   │   ├── Button.tsx         # Ant Button wrapper
│   │   ├── Button.types.ts    # Button props interface
│   │   └── index.ts
│   ├── Form/
│   │   ├── FormField.tsx      # Ant Form.Item wrapper
│   │   ├── FormInput.tsx      # Ant Input wrapper
│   │   ├── FormSelect.tsx     # Ant Select wrapper
│   │   └── index.ts
│   ├── Table/
│   │   ├── DataTable.tsx      # Ant Table with Vietnamese config
│   │   ├── TableActions.tsx   # Action buttons for tables
│   │   └── index.ts
│   ├── Upload/
│   │   ├── ImageUpload.tsx    # R2 image upload component
│   │   ├── FileUpload.tsx     # R2 file upload component
│   │   └── index.ts
│   ├── Modal/
│   │   ├── ConfirmModal.tsx   # Ant Modal wrapper
│   │   ├── FormModal.tsx      # Modal with form
│   │   └── index.ts
│   ├── Loading/
│   │   ├── PageLoading.tsx    # Ant Spin for pages
│   │   ├── ButtonLoading.tsx  # Loading state for buttons
│   │   └── index.ts
│   └── ErrorBoundary/
│       ├── ErrorBoundary.tsx  # React error boundary
│       └── index.ts
├── charts/                    # Recharts components
│   ├── RevenueChart/
│   │   ├── RevenueChart.tsx   # Daily/monthly revenue
│   │   ├── RevenueChart.types.ts
│   │   └── index.ts
│   ├── SalesChart/
│   │   ├── SalesChart.tsx     # Sales analytics
│   │   ├── SalesChart.types.ts
│   │   └── index.ts
│   ├── InventoryChart/
│   │   ├── InventoryChart.tsx # Stock level visualization
│   │   └── index.ts
│   └── KPICards/
│       ├── KPICard.tsx        # Dashboard KPI display
│       ├── KPICard.types.ts
│       └── index.ts
├── business/                  # Vietnamese business logic components
│   ├── VNDCurrency/
│   │   ├── VNDDisplay.tsx     # Vietnamese currency formatter
│   │   ├── VNDInput.tsx       # VND input with formatting
│   │   └── index.ts
│   ├── VNAddress/
│   │   ├── AddressSelector.tsx # Vietnamese address picker
│   │   ├── AddressDisplay.tsx  # Address display component
│   │   └── index.ts
│   ├── BarcodeScanner/
│   │   ├── BarcodeScanner.tsx # Barcode scanning component
│   │   ├── BarcodeDisplay.tsx # Barcode display
│   │   └── index.ts
│   └── ReceiptPrinter/
│       ├── ReceiptTemplate.tsx # Vietnamese receipt template
│       ├── ReceiptPrinter.tsx  # Print functionality
│       └── index.ts
└── layout/                    # Layout components
    ├── Header/
    │   ├── AppHeader.tsx      # Main app header
    │   ├── UserMenu.tsx       # User dropdown menu
    │   └── index.ts
    ├── Sidebar/
    │   ├── AppSidebar.tsx     # Navigation sidebar
    │   ├── MenuItems.tsx      # Menu configuration
    │   └── index.ts
    ├── Footer/
    │   ├── AppFooter.tsx      # App footer
    │   └── index.ts
    └── Breadcrumb/
        ├── AppBreadcrumb.tsx  # Navigation breadcrumb
        └── index.ts
2.2 src/features/ (Business domain features)
src/features/
├── auth/
│   ├── components/
│   │   ├── LoginForm.tsx      # Vietnamese login form
│   │   ├── UserProfile.tsx    # User profile management
│   │   └── RoleGuard.tsx      # Role-based access component
│   ├── hooks/
│   │   ├── useAuth.tsx        # Authentication hook
│   │   ├── useLogin.tsx       # Login logic hook
│   │   └── usePermissions.tsx # Permission checking hook
│   ├── services/
│   │   └── authService.ts     # Cloudflare Workers auth API
│   ├── stores/
│   │   └── authStore.ts       # Zustand auth store
│   └── types/
│       └── auth.types.ts      # Auth TypeScript types
├── pos/
│   ├── components/
│   │   ├── POSTerminal.tsx    # Main POS interface
│   │   ├── ProductGrid.tsx    # Product selection grid
│   │   ├── ShoppingCart.tsx   # Vietnamese shopping cart
│   │   ├── PaymentMethods.tsx # VN payment methods (VNPay, MoMo, ZaloPay)
│   │   ├── ReceiptPrint.tsx   # Vietnamese receipt printing
│   │   ├── BarcodeScanner.tsx # Barcode scanning integration
│   │   └── OfflineSync.tsx    # PWA offline sync component
│   ├── hooks/
│   │   ├── usePOS.tsx         # POS state management
│   │   ├── useCart.tsx        # Shopping cart logic
│   │   ├── usePayment.tsx     # Payment processing
│   │   ├── useBarcode.tsx     # Barcode scanning logic
│   │   └── useOfflineOrders.tsx # Offline order management
│   ├── services/
│   │   ├── posService.ts      # POS API calls
│   │   ├── paymentService.ts  # Vietnamese payment gateways
│   │   └── printerService.ts  # Thermal printer integration
│   ├── stores/
│   │   └── posStore.ts        # Zustand POS store
│   └── types/
│       └── pos.types.ts       # POS TypeScript definitions
├── products/
│   ├── components/
│   │   ├── ProductList.tsx    # Ant Design table with Vietnamese data
│   │   ├── ProductForm.tsx    # Product create/edit form
│   │   ├── ProductCard.tsx    # Product display card
│   │   ├── CategoryManager.tsx # Product categories
│   │   ├── InventoryTracker.tsx # Stock level tracking
│   │   ├── BarcodeGenerator.tsx # Barcode generation
│   │   └── ImageUploader.tsx  # R2 image upload for products
│   ├── hooks/
│   │   ├── useProducts.tsx    # Product CRUD operations
│   │   ├── useCategories.tsx  # Category management
│   │   ├── useInventory.tsx   # Inventory tracking
│   │   └── useProductSearch.tsx # Product search functionality
│   ├── services/
│   │   ├── productService.ts  # Product API calls
│   │   └── categoryService.ts # Category API calls
│   ├── stores/
│   │   └── productStore.ts    # Zustand product store
│   └── types/
│       └── product.types.ts   # Product TypeScript definitions
├── customers/
│   ├── components/
│   │   ├── CustomerList.tsx   # Vietnamese customer list
│   │   ├── CustomerForm.tsx   # Customer registration form
│   │   ├── LoyaltyProgram.tsx # Vietnamese loyalty system
│   │   ├── CustomerHistory.tsx # Purchase history
│   │   └── AddressBook.tsx    # Vietnamese address management
│   ├── hooks/
│   │   ├── useCustomers.tsx   # Customer management
│   │   └── useLoyalty.tsx     # Loyalty program logic
│   ├── services/
│   │   └── customerService.ts # Customer API calls
│   ├── stores/
│   │   └── customerStore.ts   # Customer state management
│   └── types/
│       └── customer.types.ts  # Customer TypeScript types
├── orders/
│   ├── components/
│   │   ├── OrderList.tsx      # Vietnamese order management
│   │   ├── OrderDetail.tsx    # Order details view
│   │   ├── OrderTracking.tsx  # Order status tracking
│   │   ├── RefundProcess.tsx  # Vietnamese refund process
│   │   └── OrderReceipt.tsx   # Vietnamese receipt template
│   ├── hooks/
│   │   ├── useOrders.tsx      # Order management
│   │   └── useRefunds.tsx     # Refund processing
│   ├── services/
│   │   └── orderService.ts    # Order API calls
│   ├── stores/
│   │   └── orderStore.ts      # Order state management
│   └── types/
│       └── order.types.ts     # Order TypeScript definitions
├── analytics/
│   ├── components/
│   │   ├── DashboardKPIs.tsx  # Vietnamese business KPIs
│   │   ├── SalesAnalytics.tsx # Sales performance charts
│   │   ├── InventoryReports.tsx # Stock reports
│   │   ├── CustomerAnalytics.tsx # Customer insights
│   │   ├── RevenueReports.tsx # VND revenue analytics
│   │   └── ExportReports.tsx  # Vietnamese export functionality
│   ├── hooks/
│   │   ├── useAnalytics.tsx   # Analytics data fetching
│   │   └── useReports.tsx     # Report generation
│   ├── services/
│   │   └── analyticsService.ts # Analytics API calls
│   ├── stores/
│   │   └── analyticsStore.ts  # Analytics state
│   └── types/
│       └── analytics.types.ts # Analytics TypeScript types
├── payments/
│   ├── components/
│   │   ├── VNPayGateway.tsx   # VNPay integration
│   │   ├── MoMoGateway.tsx    # MoMo integration
│   │   ├── ZaloPayGateway.tsx # ZaloPay integration
│   │   ├── CashPayment.tsx    # Cash payment processing
│   │   └── CardPayment.tsx    # Card payment interface
│   ├── hooks/
│   │   ├── useVNPay.tsx       # VNPay payment hook
│   │   ├── useMoMo.tsx        # MoMo payment hook
│   │   └── useZaloPay.tsx     # ZaloPay payment hook
│   ├── services/
│   │   ├── vnpayService.ts    # VNPay API integration
│   │   ├── momoService.ts     # MoMo API integration
│   │   └── zalopayService.ts  # ZaloPay API integration
│   └── types/
│       └── payment.types.ts   # Payment TypeScript types
├── staff/
│   ├── components/
│   │   ├── StaffManagement.tsx # Staff management interface
│   │   ├── PerformanceTracker.tsx # Vietnamese performance metrics
│   │   ├── ShiftManagement.tsx # Work shift scheduling
│   │   ├── CommissionTracker.tsx # Sales commission tracking
│   │   └── StaffReports.tsx   # Staff performance reports
│   ├── hooks/
│   │   ├── useStaff.tsx       # Staff management
│   │   └── usePerformance.tsx # Performance tracking
│   ├── services/
│   │   └── staffService.ts    # Staff API calls
│   └── types/
│       └── staff.types.ts     # Staff TypeScript types
└── settings/
    ├── components/
    │   ├── BusinessSettings.tsx # Vietnamese business config
    │   ├── TaxSettings.tsx     # Vietnamese tax configuration
    │   ├── ReceiptSettings.tsx # Receipt template settings
    │   ├── PaymentSettings.tsx # Payment gateway config
    │   ├── LanguageSettings.tsx # Vietnamese/English toggle
    │   └── BackupSettings.tsx  # D1 backup configuration
    ├── hooks/
    │   └── useSettings.tsx     # Settings management
    ├── services/
    │   └── settingsService.ts  # Settings API calls
    └── types/
        └── settings.types.ts   # Settings TypeScript types
2.3 src/services/ (Cloudflare Workers API)
src/services/
├── api/
│   ├── client.ts              # Axios client with Cloudflare Workers config
│   ├── endpoints.ts           # API endpoint constants
│   ├── interceptors.ts        # Request/response interceptors
│   └── types.ts               # API response types
├── cloudflare/
│   ├── d1Service.ts           # D1 database operations
│   ├── r2Service.ts           # R2 storage operations
│   ├── kvService.ts           # KV store operations
│   └── workersService.ts      # Workers-specific utilities
├── auth/
│   ├── authService.ts         # JWT authentication
│   ├── tokenService.ts        # Token management
│   └── permissionService.ts   # Role-based permissions
├── business/
│   ├── productService.ts      # Product management API
│   ├── orderService.ts        # Order processing API
│   ├── customerService.ts     # Customer management API
│   ├── inventoryService.ts    # Inventory tracking API
│   └── analyticsService.ts    # Analytics data API
├── payments/
│   ├── vnpayService.ts        # VNPay API integration
│   ├── momoService.ts         # MoMo API integration
│   ├── zalopayService.ts      # ZaloPay API integration
│   └── cashService.ts         # Cash payment processing
├── hardware/
│   ├── printerService.ts      # Thermal printer integration
│   ├── scannerService.ts      # Barcode scanner integration
│   └── cashDrawerService.ts   # Cash drawer control
├── pwa/
│   ├── syncService.ts         # Offline sync functionality
│   ├── cacheService.ts        # Service worker cache management
│   ├── notificationService.ts # Push notifications
│   └── installService.ts      # PWA installation prompts
└── external/
    ├── smsService.ts          # Vietnamese SMS providers
    ├── emailService.ts        # Email notifications
    └── backupService.ts       # External backup services
2.4 src/stores/ (Zustand state management)
src/stores/
├── authStore.ts               # User authentication state
├── posStore.ts                # POS terminal state
├── productStore.ts            # Product management state
├── customerStore.ts           # Customer management state
├── orderStore.ts              # Order processing state
├── inventoryStore.ts          # Inventory tracking state
├── analyticsStore.ts          # Analytics dashboard state
├── settingsStore.ts           # App settings state
├── uiStore.ts                 # UI state (modals, loading, etc.)
├── offlineStore.ts            # PWA offline state
└── index.ts                   # Store composition and exports
2.5 src/utils/ (Web API only - no Node.js)
src/utils/
├── formatters/
│   ├── vndCurrency.ts         # Vietnamese currency formatting
│   ├── vietnameseDate.ts      # Vietnamese date formatting
│   ├── phoneNumber.ts         # Vietnamese phone formatting
│   └── address.ts             # Vietnamese address formatting
├── validators/
│   ├── vietnameseValidators.ts # Vietnamese-specific validation
│   ├── businessValidators.ts  # Business logic validation
│   └── formValidators.ts      # Form validation helpers
├── api/
│   ├── errorHandler.ts        # Cloudflare error handling
│   ├── retryLogic.ts          # API retry mechanisms
│   └── cacheUtils.ts          # Client-side caching
├── pwa/
│   ├── serviceWorkerUtils.ts  # Service worker helpers
│   ├── offlineUtils.ts        # Offline functionality
│   └── syncUtils.ts           # Data synchronization
├── storage/
│   ├── indexedDBUtils.ts      # Client-side storage
│   ├── sessionUtils.ts        # Session management
│   └── cacheUtils.ts          # Local caching
├── business/
│   ├── taxCalculation.ts      # Vietnamese tax calculations
│   ├── discountCalculation.ts # Discount logic
│   ├── loyaltyCalculation.ts  # Loyalty points calculation
│   └── inventoryCalculation.ts # Stock calculations
└── constants/
    ├── vietnamese.ts          # Vietnamese constants
    ├── business.ts            # Business logic constants
    ├── api.ts                 # API configuration constants
    └── cloudflare.ts          # Cloudflare-specific constants
3. Backend Structure (Cloudflare Workers)
3.1 src/handlers/ (Hono.js route handlers)
src/handlers/
├── auth/
│   ├── loginHandler.ts        # JWT login endpoint
│   ├── registerHandler.ts     # User registration
│   ├── refreshHandler.ts      # Token refresh
│   └── logoutHandler.ts       # Session cleanup
├── products/
│   ├── productsHandler.ts     # Product CRUD operations
│   ├── categoriesHandler.ts   # Category management
│   ├── inventoryHandler.ts    # Stock management
│   └── searchHandler.ts       # Product search
├── orders/
│   ├── ordersHandler.ts       # Order processing
│   ├── posHandler.ts          # POS order creation
│   ├── refundsHandler.ts      # Refund processing
│   └── receiptHandler.ts      # Receipt generation
├── customers/
│   ├── customersHandler.ts    # Customer management
│   ├── loyaltyHandler.ts      # Loyalty program
│   └── historyHandler.ts      # Purchase history
├── payments/
│   ├── vnpayHandler.ts        # VNPay webhook handling
│   ├── momoHandler.ts         # MoMo webhook handling
│   ├── zalopayHandler.ts      # ZaloPay webhook handling
│   └── callbackHandler.ts     # Payment callbacks
├── analytics/
│   ├── dashboardHandler.ts    # Dashboard metrics
│   ├── reportsHandler.ts      # Report generation
│   └── exportHandler.ts       # Data export
├── uploads/
│   ├── r2Handler.ts           # R2 file upload
│   ├── imageHandler.ts        # Image processing
│   └── presignedUrlHandler.ts # Presigned URL generation
└── admin/
    ├── settingsHandler.ts     # System settings
    ├── usersHandler.ts        # User management
    └── backupHandler.ts       # Database backup
3.2 src/middleware/ (Hono.js middleware)
src/middleware/
├── auth/
│   ├── jwtMiddleware.ts       # JWT token validation
│   ├── roleMiddleware.ts      # Role-based access control
│   └── sessionMiddleware.ts   # Session management
├── security/
│   ├── corsMiddleware.ts      # CORS configuration
│   ├── rateLimitMiddleware.ts # Rate limiting with KV
│   ├── validateMiddleware.ts  # Request validation
│   └── sanitizeMiddleware.ts  # Input sanitization
├── logging/
│   ├── requestLogger.ts       # Request logging
│   ├── errorLogger.ts         # Error tracking
│   └── metricsLogger.ts       # Performance metrics
└── business/
    ├── inventoryMiddleware.ts # Stock level checking
    ├── taxMiddleware.ts       # Vietnamese tax calculation
    └── loyaltyMiddleware.ts   # Loyalty points processing
4. Shared Types Structure
shared/
├── types/
│   ├── api.types.ts           # API request/response types
│   ├── business.types.ts      # Business domain types
│   ├── database.types.ts      # D1 database types
│   ├── vietnamese.types.ts    # Vietnam-specific types
│   └── cloudflare.types.ts    # Cloudflare service types
├── constants/
│   ├── vietnamese.constants.ts # Vietnamese constants
│   ├── business.constants.ts  # Business constants
│   └── api.constants.ts       # API constants
└── schemas/
    ├── product.schemas.ts     # Zod product validation
    ├── order.schemas.ts       # Zod order validation
    ├── customer.schemas.ts    # Zod customer validation
    └── auth.schemas.ts        # Zod auth validation
