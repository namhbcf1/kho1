import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Input,
  Modal,
  Form,
  Select,
  Tag,
  Space,
  Typography,
  Row,
  Col,
  Statistic,
  Avatar,
  Divider,
  notification,
  Popconfirm,
  Tooltip,
  Badge
} from 'antd';
import {
  UserOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  SearchOutlined,
  PhoneOutlined,
  MailOutlined,
  HomeOutlined,
  GiftOutlined,
  ShoppingOutlined,
  StarOutlined
} from '@ant-design/icons';
import { validateVietnamesePhone, formatVietnamesePhone } from '../../utils/validators/vietnameseValidators';
import { formatVND } from '../../utils/formatters/vietnameseCurrency';

const { Title, Text } = Typography;
const { Search } = Input;
const { Option } = Select;

interface Customer {
  id: string;
  name: string;
  phone: string;
  email?: string;
  address?: string;
  province?: string;
  district?: string;
  ward?: string;
  totalSpent: number;
  totalOrders: number;
  loyaltyPoints: number;
  status: 'active' | 'inactive' | 'vip';
  registeredDate: string;
  lastVisit?: string;
  notes?: string;
}

const ModernCustomerPage: React.FC = () => {
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [form] = Form.useForm();

  // Sample customer data
  useEffect(() => {
    setCustomers([
      {
        id: '1',
        name: 'Nguy·ªÖn VƒÉn Anh',
        phone: '0987654321',
        email: 'nguyenvananh@gmail.com',
        address: '123 Nguy·ªÖn Hu·ªá',
        province: 'TP H·ªì Ch√≠ Minh',
        district: 'Qu·∫≠n 1',
        ward: 'Ph∆∞·ªùng B·∫øn Ngh√©',
        totalSpent: 15680000,
        totalOrders: 45,
        loyaltyPoints: 1568,
        status: 'vip',
        registeredDate: '2024-01-15',
        lastVisit: '2024-07-15',
        notes: 'Kh√°ch h√†ng VIP, th∆∞·ªùng mua ƒëi·ªán tho·∫°i cao c·∫•p'
      },
      {
        id: '2',
        name: 'Tr·∫ßn Th·ªã B√¨nh',
        phone: '0912345678',
        email: 'tranthibinh@yahoo.com',
        address: '456 L√™ L·ª£i',
        province: 'H√† N·ªôi',
        district: 'Qu·∫≠n Ho√†n Ki·∫øm',
        ward: 'Ph∆∞·ªùng H√†ng B√†i',
        totalSpent: 8950000,
        totalOrders: 28,
        loyaltyPoints: 895,
        status: 'active',
        registeredDate: '2024-02-20',
        lastVisit: '2024-07-14',
        notes: 'Th√≠ch mua ph·ª• ki·ªán c√¥ng ngh·ªá'
      },
      {
        id: '3',
        name: 'L√™ Minh Ch√¢u',
        phone: '0765432109',
        address: '789 Hai B√† Tr∆∞ng',
        province: 'ƒê√† N·∫µng',
        district: 'Qu·∫≠n H·∫£i Ch√¢u',
        ward: 'Ph∆∞·ªùng H·∫£i Ch√¢u I',
        totalSpent: 3200000,
        totalOrders: 12,
        loyaltyPoints: 320,
        status: 'active',
        registeredDate: '2024-05-10',
        lastVisit: '2024-07-10'
      }
    ]);
  }, []);

  const handleAddCustomer = () => {
    setEditingCustomer(null);
    form.resetFields();
    setModalVisible(true);
  };

  const handleEditCustomer = (customer: Customer) => {
    setEditingCustomer(customer);
    form.setFieldsValue(customer);
    setModalVisible(true);
  };

  const handleDeleteCustomer = (customerId: string) => {
    setCustomers(customers.filter(c => c.id !== customerId));
    notification.success({
      message: 'X√≥a kh√°ch h√†ng',
      description: 'Kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng'
    });
  };

  const handleSubmit = (values: any) => {
    if (editingCustomer) {
      // Edit existing customer
      setCustomers(customers.map(c => 
        c.id === editingCustomer.id 
          ? { ...editingCustomer, ...values }
          : c
      ));
      notification.success({
        message: 'C·∫≠p nh·∫≠t kh√°ch h√†ng',
        description: 'Th√¥ng tin kh√°ch h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
      });
    } else {
      // Add new customer
      const newCustomer: Customer = {
        id: Date.now().toString(),
        ...values,
        totalSpent: 0,
        totalOrders: 0,
        loyaltyPoints: 0,
        status: 'active',
        registeredDate: new Date().toISOString().split('T')[0]
      };
      setCustomers([...customers, newCustomer]);
      notification.success({
        message: 'Th√™m kh√°ch h√†ng',
        description: 'Kh√°ch h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng'
      });
    }
    setModalVisible(false);
    form.resetFields();
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'vip': return 'gold';
      case 'active': return 'green';
      case 'inactive': return 'red';
      default: return 'blue';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'vip': return 'VIP';
      case 'active': return 'Ho·∫°t ƒë·ªông';
      case 'inactive': return 'Ng·ª´ng ho·∫°t ƒë·ªông';
      default: return status;
    }
  };

  const filteredCustomers = customers.filter(customer =>
    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    customer.phone.includes(searchTerm) ||
    (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const totalCustomers = customers.length;
  const vipCustomers = customers.filter(c => c.status === 'vip').length;
  const totalRevenue = customers.reduce((sum, c) => sum + c.totalSpent, 0);
  const avgOrderValue = totalRevenue / customers.reduce((sum, c) => sum + c.totalOrders, 0) || 0;

  const columns = [
    {
      title: 'Kh√°ch h√†ng',
      key: 'customer',
      render: (record: Customer) => (
        <Space>
          <Avatar icon={<UserOutlined />} />
          <div>
            <div style={{ fontWeight: 600 }}>{record.name}</div>
            <Text type="secondary" style={{ fontSize: '12px' }}>
              <PhoneOutlined /> {formatVietnamesePhone(record.phone)}
            </Text>
          </div>
        </Space>
      )
    },
    {
      title: 'ƒê·ªãa ch·ªâ',
      key: 'address',
      render: (record: Customer) => (
        <div>
          {record.address && (
            <div style={{ fontSize: '13px' }}>{record.address}</div>
          )}
          <Text type="secondary" style={{ fontSize: '11px' }}>
            {record.ward && `${record.ward}, `}
            {record.district && `${record.district}, `}
            {record.province}
          </Text>
        </div>
      )
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => (
        <Tag color={getStatusColor(status)}>
          {status === 'vip' && <StarOutlined />} {getStatusText(status)}
        </Tag>
      )
    },
    {
      title: 'T·ªïng chi ti√™u',
      dataIndex: 'totalSpent',
      key: 'totalSpent',
      render: (amount: number) => (
        <Text strong style={{ color: '#52c41a' }}>
          {formatVND(amount)}
        </Text>
      )
    },
    {
      title: 'ƒê∆°n h√†ng',
      dataIndex: 'totalOrders',
      key: 'totalOrders',
      render: (orders: number) => (
        <Badge count={orders} showZero style={{ backgroundColor: '#1890ff' }} />
      )
    },
    {
      title: 'ƒêi·ªÉm t√≠ch l≈©y',
      dataIndex: 'loyaltyPoints',
      key: 'loyaltyPoints',
      render: (points: number) => (
        <Space>
          <GiftOutlined style={{ color: '#fa8c16' }} />
          <Text>{points.toLocaleString()}</Text>
        </Space>
      )
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (record: Customer) => (
        <Space>
          <Tooltip title="Ch·ªânh s·ª≠a">
            <Button
              icon={<EditOutlined />}
              size="small"
              onClick={() => handleEditCustomer(record)}
            />
          </Tooltip>
          <Popconfirm
            title="X√≥a kh√°ch h√†ng"
            description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng n√†y?"
            onConfirm={() => handleDeleteCustomer(record.id)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Tooltip title="X√≥a">
              <Button
                icon={<DeleteOutlined />}
                size="small"
                danger
              />
            </Tooltip>
          </Popconfirm>
        </Space>
      )
    }
  ];

  return (
    <div style={{ padding: '24px' }}>
      <Title level={2}>üë• Qu·∫£n l√Ω Kh√°ch h√†ng</Title>
      
      {/* Statistics */}
      <Row gutter={16} style={{ marginBottom: '24px' }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="T·ªïng kh√°ch h√†ng"
              value={totalCustomers}
              prefix={<UserOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Kh√°ch VIP"
              value={vipCustomers}
              prefix={<StarOutlined />}
              valueStyle={{ color: '#faad14' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="T·ªïng doanh thu"
              value={formatVND(totalRevenue)}
              prefix={<ShoppingOutlined />}
              valueStyle={{ color: '#52c41a' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Gi√° tr·ªã ƒë∆°n TB"
              value={formatVND(avgOrderValue)}
              prefix={<ShoppingOutlined />}
            />
          </Card>
        </Col>
      </Row>

      {/* Actions and Search */}
      <Card style={{ marginBottom: '16px' }}>
        <Row justify="space-between" align="middle">
          <Col>
            <Search
              placeholder="T√¨m ki·∫øm kh√°ch h√†ng..."
              allowClear
              style={{ width: 300 }}
              onChange={(e) => setSearchTerm(e.target.value)}
              prefix={<SearchOutlined />}
            />
          </Col>
          <Col>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={handleAddCustomer}
            >
              Th√™m kh√°ch h√†ng
            </Button>
          </Col>
        </Row>
      </Card>

      {/* Customer Table */}
      <Card>
        <Table
          columns={columns}
          dataSource={filteredCustomers}
          rowKey="id"
          loading={loading}
          pagination={{
            pageSize: 10,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) =>
              `${range[0]}-${range[1]} c·ªßa ${total} kh√°ch h√†ng`
          }}
        />
      </Card>

      {/* Add/Edit Customer Modal */}
      <Modal
        title={editingCustomer ? 'Ch·ªânh s·ª≠a kh√°ch h√†ng' : 'Th√™m kh√°ch h√†ng m·ªõi'}
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          <Form.Item
            name="name"
            label="H·ªç v√† t√™n"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n!' }]}
          >
            <Input placeholder="Nh·∫≠p h·ªç v√† t√™n kh√°ch h√†ng" />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="phone"
                label="S·ªë ƒëi·ªán tho·∫°i"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' },
                  {
                    validator: (_, value) => {
                      if (!value || validateVietnamesePhone(value)) {
                        return Promise.resolve();
                      }
                      return Promise.reject('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!');
                    }
                  }
                ]}
              >
                <Input placeholder="0987654321" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="email"
                label="Email (t√πy ch·ªçn)"
                rules={[{ type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá!' }]}
              >
                <Input placeholder="example@gmail.com" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="address"
            label="ƒê·ªãa ch·ªâ"
          >
            <Input placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng" />
          </Form.Item>

          <Row gutter={16}>
            <Col span={8}>
              <Form.Item name="ward" label="Ph∆∞·ªùng/X√£">
                <Input placeholder="Ph∆∞·ªùng/X√£" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item name="district" label="Qu·∫≠n/Huy·ªán">
                <Input placeholder="Qu·∫≠n/Huy·ªán" />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item name="province" label="T·ªânh/Th√†nh ph·ªë">
                <Select placeholder="Ch·ªçn t·ªânh/th√†nh ph·ªë">
                  <Option value="TP H·ªì Ch√≠ Minh">TP H·ªì Ch√≠ Minh</Option>
                  <Option value="H√† N·ªôi">H√† N·ªôi</Option>
                  <Option value="ƒê√† N·∫µng">ƒê√† N·∫µng</Option>
                  <Option value="C·∫ßn Th∆°">C·∫ßn Th∆°</Option>
                  <Option value="H·∫£i Ph√≤ng">H·∫£i Ph√≤ng</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="notes"
            label="Ghi ch√∫"
          >
            <Input.TextArea rows={3} placeholder="Ghi ch√∫ v·ªÅ kh√°ch h√†ng..." />
          </Form.Item>

          <Divider />

          <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
            <Button onClick={() => setModalVisible(false)}>
              H·ªßy
            </Button>
            <Button type="primary" htmlType="submit">
              {editingCustomer ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
            </Button>
          </Space>
        </Form>
      </Modal>
    </div>
  );
};

export default ModernCustomerPage;